// g++ hash.cc -I ../include -lgtest -L ./ -lnax -pthread -ohash -std=c++11 -fpermissive -g3 -fstack-protector-all -fstack-check=specific -lgtest_main
#include <gtest/gtest.h>

#include "ifos.h"
#include "hash.h"

#include <stdio.h>

const uint8_t vectors_sip64[64][8] = {
    { 0xe2, 0x12, 0x5c, 0x56, 0x51, 0x8b, 0xa2, 0xce, },
    { 0xa6, 0x7b, 0xce, 0x34, 0x8c, 0xf3, 0xaa, 0x94, },
    { 0x34, 0xb4, 0xfa, 0xc5, 0xc2, 0x42, 0x7a, 0xfe, },
    { 0x4c, 0x36, 0xc3, 0x29, 0x52, 0x25, 0x0d, 0x1c, },
    { 0xf5, 0xfd, 0x4d, 0x47, 0x7a, 0x84, 0xe7, 0x8b, },
    { 0x96, 0x22, 0x75, 0x0f, 0x42, 0xf0, 0x58, 0x28, },
    { 0x26, 0x26, 0xc5, 0x8a, 0x7d, 0x8a, 0x1a, 0xe6, },
    { 0x5a, 0xb0, 0x92, 0xf4, 0xbc, 0x4c, 0x3c, 0xf0, },
    { 0x74, 0xaf, 0x93, 0xd0, 0xb4, 0x45, 0x68, 0x60, },
    { 0x56, 0x4a, 0xc7, 0x71, 0x82, 0xe7, 0x04, 0xe3, },
    { 0x33, 0x26, 0xb3, 0x33, 0x0e, 0xe0, 0x36, 0xc9, },
    { 0x5c, 0xb4, 0x9a, 0xf2, 0xe5, 0x12, 0x62, 0x22, },
    { 0xda, 0xe0, 0xbf, 0xfb, 0x74, 0x7b, 0x37, 0xa4, },
    { 0x6f, 0x80, 0x90, 0x71, 0x66, 0x17, 0x43, 0x62, },
    { 0xd7, 0x97, 0xe1, 0xe3, 0x78, 0xad, 0x72, 0x4a, },
    { 0xa6, 0x66, 0x89, 0x1c, 0xbc, 0x61, 0x8f, 0xec, },
    { 0x51, 0xa7, 0x47, 0xe7, 0xdf, 0xf4, 0x11, 0x13, },
    { 0x9c, 0x33, 0x85, 0x2c, 0x29, 0x7b, 0x9c, 0x89, },
    { 0xdd, 0xb5, 0x68, 0x53, 0xe9, 0x0a, 0xb2, 0xa3, },
    { 0xce, 0xef, 0x0e, 0xe7, 0x2e, 0x41, 0x13, 0xb6, },
    { 0x5a, 0xa6, 0x2a, 0xe0, 0x48, 0x74, 0x24, 0xe4, },
    { 0x13, 0xee, 0x9f, 0x5b, 0xb0, 0x1a, 0x04, 0x7e, },
    { 0xfe, 0x84, 0x56, 0x51, 0xcc, 0xc8, 0x1b, 0x87, },
    { 0x76, 0x1a, 0xde, 0x8c, 0xcf, 0x62, 0x66, 0x43, },
    { 0xa2, 0xf3, 0x79, 0xd8, 0x51, 0x62, 0xfd, 0xd5, },
    { 0xe7, 0x4f, 0x74, 0xc1, 0xb8, 0x24, 0xc4, 0x82, },
    { 0xd5, 0x06, 0xa5, 0xab, 0xa3, 0x28, 0x70, 0x96, },
    { 0x10, 0xbf, 0xdd, 0xb1, 0x36, 0x93, 0x17, 0xf2, },
    { 0x84, 0xaa, 0xd9, 0x11, 0x32, 0x0e, 0xf9, 0xde, },
    { 0x41, 0xae, 0x89, 0x1d, 0xba, 0x74, 0x3e, 0xa3, },
    { 0x0e, 0x5e, 0xc5, 0x5d, 0x81, 0x20, 0x09, 0xed, },
    { 0xb3, 0xa3, 0xea, 0xf5, 0xfe, 0x50, 0x94, 0x3d, },
    { 0xbc, 0x48, 0x65, 0x22, 0x4a, 0x0d, 0xd1, 0x8b, },
    { 0xa1, 0xbf, 0x43, 0xa2, 0xd1, 0xbb, 0xdf, 0xb0, },
    { 0x03, 0x73, 0xaf, 0x2b, 0x63, 0x27, 0x5f, 0x36, },
    { 0xf9, 0xdc, 0x66, 0x13, 0xbc, 0x00, 0x51, 0x54, },
    { 0xb4, 0xb1, 0x9b, 0x06, 0x0c, 0x50, 0x1b, 0x61, },
    { 0x5a, 0x4c, 0xc5, 0x00, 0x0c, 0x32, 0xbc, 0xc7, },
    { 0x51, 0x51, 0x71, 0x33, 0x56, 0xf9, 0x0a, 0x5e, },
    { 0x53, 0x04, 0xc9, 0x74, 0x9b, 0x52, 0x43, 0x14, },
    { 0x30, 0x52, 0x5d, 0x49, 0x3d, 0x52, 0x34, 0x16, },
    { 0xf2, 0x99, 0x29, 0xd0, 0x88, 0x8e, 0x95, 0x75, },
    { 0x2b, 0x7d, 0x12, 0x11, 0x3c, 0x66, 0x95, 0x12, },
    { 0x0d, 0xd6, 0x9b, 0x6a, 0x6d, 0x69, 0xb2, 0xcd, },
    { 0xef, 0x2c, 0xf3, 0xaa, 0x75, 0x2f, 0x71, 0x36, },
    { 0x3f, 0x9d, 0xc2, 0x8d, 0x40, 0xd7, 0x62, 0xae, },
    { 0x06, 0xba, 0xab, 0xb0, 0xde, 0x27, 0xeb, 0xd8, },
    { 0x9f, 0xed, 0xe9, 0x79, 0x02, 0x44, 0x4d, 0xc2, },
    { 0x08, 0x65, 0xb9, 0x3f, 0x6c, 0x41, 0x7d, 0x32, },
    { 0x49, 0x79, 0x53, 0x11, 0xd7, 0x07, 0xbc, 0x84, },
    { 0xce, 0xfa, 0xdb, 0x51, 0x02, 0xfb, 0x80, 0xc4, },
    { 0x67, 0xeb, 0x56, 0x13, 0xb9, 0x3f, 0x51, 0xff, },
    { 0x31, 0x9e, 0xa3, 0x38, 0x2c, 0xdc, 0xd4, 0x9c, },
    { 0x1a, 0xb5, 0x88, 0x49, 0xea, 0x87, 0xbd, 0x3c, },
    { 0x7b, 0x39, 0xb1, 0xa5, 0xac, 0x5c, 0x73, 0x7b, },
    { 0xe1, 0xa4, 0x9b, 0x30, 0xee, 0x19, 0x23, 0x1f, },
    { 0xf9, 0x96, 0x1c, 0x88, 0x1f, 0xe5, 0x34, 0x58, },
    { 0xd7, 0x70, 0x57, 0x2b, 0xa9, 0x88, 0x85, 0x1a, },
    { 0x58, 0x6e, 0xd1, 0xde, 0xe6, 0xa8, 0x37, 0xd4, },
    { 0x39, 0xe8, 0x6a, 0x22, 0xa0, 0x09, 0x1e, 0xf5, },
    { 0x86, 0xca, 0x6c, 0x8a, 0xe5, 0x93, 0xbb, 0xfe, },
    { 0x65, 0xc0, 0x42, 0x2d, 0x07, 0x05, 0x1e, 0xa3, },
    { 0x4c, 0x8b, 0xfc, 0xe5, 0x9f, 0x01, 0x7b, 0xad, },
    { 0xd9, 0xd6, 0xba, 0xac, 0xaf, 0x07, 0x6d, 0xff, },
};

TEST(DoTestSiphash, TestSipHash)
{
    uint8_t in[64], k[16];
    int i;

    for (i = 0; i < 16; ++i) {
        k[i] = i;
    }

    for (i = 0; i < 64; ++i) {
        in[i] = i;
        uint64_t hash = siphash(in, i, k);
        const uint8_t *v = NULL;
        v = (uint8_t *)vectors_sip64;
        EXPECT_EQ(0, memcmp(&hash, v + (i * 8), 8));
    }

    /* Run a few basic tests with the case insensitive version. */
    uint64_t h1, h2;
    h1 = siphash((uint8_t*)"hello world",11,(uint8_t*)"1234567812345678");
    h2 = siphash_nocase((uint8_t*)"hello world",11,(uint8_t*)"1234567812345678");
    EXPECT_EQ (h1, h2);

    h1 = siphash((uint8_t*)"hello world",11,(uint8_t*)"1234567812345678");
    h2 = siphash_nocase((uint8_t*)"HELLO world",11,(uint8_t*)"1234567812345678");
    EXPECT_EQ (h1, h2);

    h1 = siphash((uint8_t*)"HELLO world",11,(uint8_t*)"1234567812345678");
    h2 = siphash_nocase((uint8_t*)"HELLO world",11,(uint8_t*)"1234567812345678");
    EXPECT_NE (h1, h2);
}

TEST(DoTestDESEncrypt, TestDESEncrypt)
{
    char origin[64], encrypt[64], decrypt[64];

    for (unsigned int i = 0; i < sizeof(origin); i++) {
        origin[i] = ifos_random(1, 254);
    }

    int fr = des_encrypt(origin, sizeof(origin), NULL, encrypt);
    EXPECT_NE(0, memcmp(origin, encrypt, sizeof(origin)));
    EXPECT_EQ(sizeof(origin), fr);

    fr = des_decrypt(encrypt, sizeof(encrypt), NULL, decrypt);
    EXPECT_NE(0, memcmp(encrypt, decrypt, sizeof(encrypt)));
    EXPECT_EQ(0, memcmp(decrypt, origin, sizeof(origin)));
}

TEST(DoTestDESEncryptWithKey, TestDESEncryptWithKey)
{
    char origin[64], encrypt[64], decrypt[64];
    abuff_des_key_t key;

    for (unsigned int i = 0; i < sizeof(origin); i++) {
        origin[i] = ifos_random(1, 254);
    }

    for (unsigned int i = 0; i < sizeof(key); i++) {
        key.u.st[i] = ifos_random(1, 127);
    }

    int fr = des_encrypt(origin, sizeof(origin), &key, encrypt);
    EXPECT_EQ(sizeof(origin), fr);
    EXPECT_NE(0, memcmp(origin, encrypt, sizeof(origin)));

    fr = des_decrypt(encrypt, sizeof(encrypt), &key, decrypt);
    EXPECT_EQ(sizeof(origin), fr);
    EXPECT_NE(0, memcmp(encrypt, decrypt, sizeof(encrypt)));
    EXPECT_EQ(0, memcmp(decrypt, origin, sizeof(origin)));
}
